import numpy as np
import  math
from . import GasProperties_functions
from . import oilprops
from . import gasOilRatio_functions as RS
from . import OFVF_functions
from . import  flowCommon
from . import oilViscosity_functions

# qo, qw (stb/day)
# Bw (bbl/stb)
# rhoW (bm/ft3),
# muW (cp)
# iftW  (dyne/cm)
# T2, T1, Tpc (f)
# d2, d1 (ft)
# Pb, P1, Ppc (psi)
# gacc, gc
# dL (ft)

def modifiedHagedornBrown(qo, qw, Bw, rhoW, muW, iftW, T2, P1, T1, d2, d1, Pb,
                          c_val_Rs, Rs_method, gammaGas, gammaOil, OFVF_method,c_OFVF,
                          gacc, gc, dL, theta, e, Ppc, Tpc, c_val_Z,
                          muO_method1, muO_method2, muO_method3, c_val_muO, c_val_mug):
    HBySai = 	list([(2.0375E-06, 0.0526752),
                (2.0061E-06, 0.0526398),
                (2.1343E-06, 0.0557842),
                (2.1676E-06, 0.0558195),
                (2.2357E-06, 0.0588931),
                (2.3061E-06, 0.0589639),
                (2.3785E-06, 0.0620374),
                (2.4918E-06, 0.0621436),
                (2.5700E-06, 0.0652172),
                (2.6510E-06, 0.0652879),
                (2.7345E-06, 0.0653587),
                (2.7769E-06, 0.0683969),
                (2.8644E-06, 0.0684677),
                (2.9089E-06, 0.0715058),
                (3.0005E-06, 0.0715766),
                (3.0474E-06, 0.071612),
                (3.1430E-06, 0.0746856),
                (3.2417E-06, 0.0777591),
                (3.3438E-06, 0.0778299),
                (3.3961E-06, 0.0778653),
                (3.5027E-06, 0.0809389),
                (3.6130E-06, 0.0810096),
                (3.6691E-06, 0.0840478),
                (3.7265E-06, 0.0840832),
                (3.7847E-06, 0.0841186),
                (3.8438E-06, 0.084154),
                (3.9035E-06, 0.0871921),
                (4.0894E-06, 0.0872983),
                (4.1529E-06, 0.0903365),
                (4.2178E-06, 0.0903719),
                (4.3506E-06, 0.0904426),
                (4.4182E-06, 0.0934808),
                (4.5569E-06, 0.0965544),
                (4.7739E-06, 0.0966605),
                (4.8485E-06, 0.0966959),
                (4.9238E-06, 0.0997341),
                (5.2388E-06, 0.0998756),
                (5.3202E-06, 0.102914),
                (5.4877E-06, 0.102985),
                (5.5730E-06, 0.106023),
                (5.7485E-06, 0.106094),
                (5.8383E-06, 0.106129),
                (6.0216E-06, 0.109202),
                (6.2113E-06, 0.109273),
                (6.4069E-06, 0.109344),
                (6.5064E-06, 0.112382),
                (6.7113E-06, 0.112453),
                (6.8156E-06, 0.115491),
                (7.0302E-06, 0.115562),
                (7.1394E-06, 0.1186),
                (7.2510E-06, 0.118635),
                (7.3643E-06, 0.118671),
                (7.5955E-06, 0.121744),
                (7.7142E-06, 0.12178),
                (7.9571E-06, 0.121851),
                (8.2070E-06, 0.124924),
                (8.3352E-06, 0.12496),
                (8.5969E-06, 0.128033),
                (8.8677E-06, 0.128104),
                (9.1470E-06, 0.128175),
                (9.2890E-06, 0.131213),
                (9.5816E-06, 0.131284),
                (9.7304E-06, 0.134322),
                (1.0037E-05, 0.134393),
                (1.0194E-05, 0.134428),
                (1.0352E-05, 0.137466),
                (1.0514E-05, 0.137502),
                (1.0677E-05, 0.14054),
                (1.0844E-05, 0.140575),
                (1.1185E-05, 0.140646),
                (1.1359E-05, 0.143684),
                (1.1717E-05, 0.143755),
                (1.1900E-05, 0.14379),
                (1.2085E-05, 0.146828),
                (1.2274E-05, 0.146864),
                (1.2659E-05, 0.149937),
                (1.2857E-05, 0.149973),
                (1.3058E-05, 0.150008),
                (1.3260E-05, 0.153046),
                (1.3468E-05, 0.153082),
                (1.3891E-05, 0.156155),
                (1.4328E-05, 0.156226),
                (1.4778E-05, 0.1593),
                (1.5242E-05, 0.162373),
                (1.5722E-05, 0.162444),
                (1.5966E-05, 0.165482),
                (1.6469E-05, 0.165553),
                (1.6725E-05, 0.168591),
                (1.7251E-05, 0.168662),
                (1.7793E-05, 0.171735),
                (1.8071E-05, 0.171771),
                (1.8354E-05, 0.171806),
                (1.8930E-05, 0.17488),
                (1.9224E-05, 0.177918),
                (1.9829E-05, 0.177989),
                (2.0454E-05, 0.178059),
                (2.0771E-05, 0.181098),
                (2.1426E-05, 0.181168),
                (2.1758E-05, 0.184207),
                (2.2098E-05, 0.184242),
                (2.2442E-05, 0.18728),
                (2.3148E-05, 0.187351),
                (2.3508E-05, 0.190389),
                (2.3875E-05, 0.190424),
                (2.5012E-05, 0.190531),
                (2.5403E-05, 0.190566),
                (2.5797E-05, 0.193604),
                (2.6198E-05, 0.196642),
                (2.7023E-05, 0.196713),
                (2.7445E-05, 0.196748),
                (2.8307E-05, 0.199822),
                (2.8747E-05, 0.20286),
                (3.0115E-05, 0.202966),
                (3.1061E-05, 0.20604),
                (3.1546E-05, 0.206075),
                (3.2537E-05, 0.209149),
                (3.3042E-05, 0.212187),
                (3.3558E-05, 0.212222),
                (3.4615E-05, 0.212293),
                (3.5153E-05, 0.215331),
                (3.5699E-05, 0.21837),
                (3.6820E-05, 0.221443),
                (3.7395E-05, 0.221479),
                (3.8573E-05, 0.221549),
                (3.9172E-05, 0.224587),
                (3.9784E-05, 0.224623),
                (4.0406E-05, 0.224658),
                (4.1033E-05, 0.227696),
                (4.1670E-05, 0.230735),
                (4.2322E-05, 0.23077),
                (4.2979E-05, 0.233808),
                (4.4333E-05, 0.233879),
                (4.5021E-05, 0.236917),
                (4.6439E-05, 0.236988),
                (4.7897E-05, 0.240061),
                (4.9401E-05, 0.243135),
                (5.0168E-05, 0.246173),
                (5.1743E-05, 0.249247),
                (5.2547E-05, 0.252285),
                (5.5044E-05, 0.255394),
                (5.6772E-05, 0.258467),
                (5.7654E-05, 0.261506),
                (5.9464E-05, 0.264579),
                (6.1337E-05, 0.26465),
                (6.3263E-05, 0.267724),
                (6.5249E-05, 0.270797),
                (6.7298E-05, 0.273871),
                (6.8343E-05, 0.276909),
                (6.9405E-05, 0.279947),
                (7.1590E-05, 0.280018),
                (7.3838E-05, 0.283091),
                (7.4985E-05, 0.28613),
                (7.7332E-05, 0.292206),
                (7.9760E-05, 0.295279),
                (8.3550E-05, 0.298388),
                (8.6174E-05, 0.301462),
                (8.8871E-05, 0.307538),
                (9.1653E-05, 0.313615),
                (9.4531E-05, 0.316688),
                (9.5999E-05, 0.319726),
                (1.0055E-04, 0.325838),
                (1.0371E-04, 0.328912),
                (1.0863E-04, 0.335023),
                (1.1203E-04, 0.3411),
                (1.1554E-04, 0.344173),
                (1.1917E-04, 0.347247),
                (1.2291E-04, 0.35032),
                (1.2482E-04, 0.353359),
                (1.2676E-04, 0.356397),
                (1.2873E-04, 0.359435),
                (1.3277E-04, 0.362509),
                (1.3483E-04, 0.365547),
                (1.3693E-04, 0.368585),
                (1.3905E-04, 0.371623),
                (1.4342E-04, 0.374697),
                (1.4563E-04, 0.380738),
                (1.5255E-04, 0.383847),
                (1.5491E-04, 0.389888),
                (1.5731E-04, 0.392926),
                (1.5976E-04, 0.395964),
                (1.6477E-04, 0.399037),
                (1.6733E-04, 0.402076),
                (1.6993E-04, 0.405114),
                (1.7527E-04, 0.408187),
                (1.7799E-04, 0.411226),
                (1.8075E-04, 0.414264),
                (1.8356E-04, 0.417302),
                (1.8639E-04, 0.423343),
                (1.9225E-04, 0.426416),
                (1.9523E-04, 0.429455),
                (1.9826E-04, 0.432493),
                (2.0134E-04, 0.435531),
                (2.0447E-04, 0.438569),
                (2.0765E-04, 0.441607),
                (2.1087E-04, 0.444646),
                (2.1415E-04, 0.447684),
                (2.1747E-04, 0.450722),
                (2.2085E-04, 0.45376),
                (2.2428E-04, 0.456798),
                (2.2776E-04, 0.459836),
                (2.3130E-04, 0.462875),
                (2.3489E-04, 0.465913),
                (2.3854E-04, 0.468951),
                (2.4225E-04, 0.471989),
                (2.4601E-04, 0.475027),
                (2.4983E-04, 0.478065),
                (2.5371E-04, 0.481104),
                (2.6167E-04, 0.484177),
                (2.6574E-04, 0.487215),
                (2.6987E-04, 0.490254),
                (2.7406E-04, 0.493292),
                (2.7829E-04, 0.499333),
                (2.8261E-04, 0.502371),
                (2.8700E-04, 0.505409),
                (2.9148E-04, 0.505444),
                (2.9601E-04, 0.508483),
                (2.9598E-04, 0.511485),
                (3.0058E-04, 0.514524),
                (3.0525E-04, 0.517562),
                (3.0999E-04, 0.5206),
                (3.1480E-04, 0.523638),
                (3.1972E-04, 0.523674),
                (3.1969E-04, 0.526676),
                (3.2466E-04, 0.529714),
                (3.2970E-04, 0.532753),
                (3.3482E-04, 0.535791),
                (3.3479E-04, 0.538794),
                (3.4002E-04, 0.538829),
                (3.4530E-04, 0.541867),
                (3.4527E-04, 0.54487),
                (3.5063E-04, 0.547908),
                (3.5608E-04, 0.550946),
                (3.6161E-04, 0.553985),
                (3.6726E-04, 0.55402),
                (3.7296E-04, 0.557058),
                (3.7872E-04, 0.563099),
                (3.8460E-04, 0.566137),
                (3.9057E-04, 0.569175),
                (3.9664E-04, 0.572214),
                (4.0280E-04, 0.575252),
                (4.0276E-04, 0.578255),
                (4.0902E-04, 0.581293),
                (4.2182E-04, 0.587369),
                (4.3502E-04, 0.593445),
                (4.4178E-04, 0.596484),
                (4.4864E-04, 0.599522),
                (4.5561E-04, 0.60256),
                (4.6268E-04, 0.605598),
                (4.7717E-04, 0.611674),
                (4.7712E-04, 0.614677),
                (4.9206E-04, 0.620754),
                (4.9970E-04, 0.623792),
                (5.0746E-04, 0.62683),
                (5.1534E-04, 0.629868),
                (5.3147E-04, 0.635945),
                (5.3968E-04, 0.641985),
                (5.4801E-04, 0.648026),
                (5.5652E-04, 0.651065),
                (5.6516E-04, 0.654103),
                (5.7394E-04, 0.657141),
                (5.7389E-04, 0.660144),
                (5.8280E-04, 0.663182),
                (5.9185E-04, 0.66622),
                (6.0104E-04, 0.669258),
                (6.0099E-04, 0.672261),
                (6.1032E-04, 0.675299),
                (6.1980E-04, 0.678337),
                (6.2943E-04, 0.681376),
                (6.3920E-04, 0.684414),
                (6.4913E-04, 0.687452),
                (6.4907E-04, 0.690455),
                (6.5915E-04, 0.693493),
                (6.6939E-04, 0.696531),
                (6.7972E-04, 0.702572),
                (6.9028E-04, 0.70561),
                (7.0100E-04, 0.708648),
                (7.2287E-04, 0.717728),
                (7.3403E-04, 0.723769),
                (7.4543E-04, 0.726807),
                (7.5701E-04, 0.729845),
                (7.6876E-04, 0.732883),
                (7.8063E-04, 0.738924),
                (7.9268E-04, 0.744965),
                (8.0507E-04, 0.745),
                (8.1749E-04, 0.751041),
                (8.3019E-04, 0.75408),
                (8.4308E-04, 0.757118),
                (8.5610E-04, 0.763159),
                (8.6939E-04, 0.766197),
                (8.8290E-04, 0.769235),
                (8.9652E-04, 0.775276),
                (9.1036E-04, 0.781317),
                (9.2450E-04, 0.784355),
                (9.5353E-04, 0.787429),
                (9.8338E-04, 0.793505),
                (9.9856E-04, 0.799546),
                (1.0141E-03, 0.802584),
                (1.0297E-03, 0.808625),
                (1.0457E-03, 0.811663),
                (1.0785E-03, 0.81774),
                (1.0952E-03, 0.820778),
                (1.1122E-03, 0.823816),
                (1.1295E-03, 0.826854),
                (1.1470E-03, 0.829892),
                (1.1830E-03, 0.832966),
                (1.2201E-03, 0.839042),
                (1.2389E-03, 0.845083),
                (1.2777E-03, 0.85116),
                (1.3178E-03, 0.854233),
                (1.3383E-03, 0.857271),
                (1.3591E-03, 0.86031),
                (1.3802E-03, 0.863348),
                (1.4016E-03, 0.866386),
                (1.4234E-03, 0.869424),
                (1.4455E-03, 0.872462),
                (1.4679E-03, 0.8755),
                (1.4907E-03, 0.878539),
                (1.5375E-03, 0.881612),
                (1.5614E-03, 0.88465),
                (1.5858E-03, 0.884686),
                (1.6103E-03, 0.890727),
                (1.6353E-03, 0.893765),
                (1.6866E-03, 0.896838),
                (1.7128E-03, 0.899877),
                (1.7394E-03, 0.902915),
                (1.7664E-03, 0.905953),
                (1.7939E-03, 0.908991),
                (1.8217E-03, 0.912029),
                (1.8789E-03, 0.915103),
                (1.9081E-03, 0.918141),
                (1.9680E-03, 0.921215),
                (2.0296E-03, 0.927291),
                (2.0612E-03, 0.930329),
                (2.1591E-03, 0.933438),
                (2.2269E-03, 0.936512),
                (2.2968E-03, 0.939585),
                (2.3325E-03, 0.942623),
                (2.4059E-03, 0.942694),
                (2.4815E-03, 0.945768),
                (2.5200E-03, 0.948806),
                (2.5592E-03, 0.951844),
                (2.6808E-03, 0.954953),
                (2.7226E-03, 0.954988),
                (2.8517E-03, 0.9611),
                (2.9416E-03, 0.961171),
                (3.0813E-03, 0.96428),
                (3.2277E-03, 0.967389),
                (3.2779E-03, 0.970427),
                (3.3811E-03, 0.970498),
                (3.4873E-03, 0.973571),
                (3.6530E-03, 0.97668),
                (3.7680E-03, 0.976751),
                (3.8867E-03, 0.976822),
                (4.0087E-03, 0.979895),
                (4.0714E-03, 0.979931),
                (4.1992E-03, 0.983004),
                (4.3314E-03, 0.983075),
                (4.3991E-03, 0.983111),
                (4.5377E-03, 0.983181),
                (4.6086E-03, 0.983217),
                (4.6801E-03, 0.986255),
                (4.7533E-03, 0.98629),
                (4.9030E-03, 0.986361),
                (5.0574E-03, 0.986432),
                (5.2167E-03, 0.986503),
                (5.2982E-03, 0.986538)]);

    HBsai = list([(0.00155678, 0.997534),
     (0.00202329, 0.997611),
     (0.00248981, 0.997689),
     (0.00311183, 0.997793),
     (0.00388935, 0.997922),
     (0.00435586, 0.998),
     (0.00528889, 0.998156),
     (0.00637743, 0.998337),
     (0.00839899, 0.998674),
     (0.00948753, 0.998855),
     (0.0105761, 0.999037),
     (0.0115074, 1.00197),
     (0.0119721, 1.00482),
     (0.0125924, 1.00771),
     (0.0132127, 1.01059),
     (0.013522, 1.01342),
     (0.0138296, 1.01902),
     (0.0141406, 1.01908),
     (0.0144481, 1.02468),
     (0.0147574, 1.02751),
     (0.015065, 1.03312),
     (0.0153742, 1.03595),
     (0.0156818, 1.04155),
     (0.0159911, 1.04438),
     (0.0161449, 1.04719),
     (0.0162986, 1.04999),
     (0.01676, 1.0584),
     (0.0170693, 1.06123),
     (0.0175323, 1.06686),
     (0.0178416, 1.06969),
     (0.0179936, 1.07527),
     (0.0183029, 1.0781),
     (0.0186105, 1.08371),
     (0.0189198, 1.08654),
     (0.0190718, 1.09212),
     (0.0193776, 1.1005),
     (0.0196852, 1.10611),
     (0.0199927, 1.11172),
     (0.0201448, 1.1173),
     (0.0204523, 1.12291),
     (0.0206027, 1.13126),
     (0.0209119, 1.13409),
     (0.021064, 1.13967),
     (0.021216, 1.14525),
     (0.0213698, 1.14806),
     (0.0215219, 1.15364),
     (0.0216739, 1.15922),
     (0.021826, 1.1648),
     (0.021978, 1.17038),
     (0.0222838, 1.17877),
     (0.0225931, 1.1816),
     (0.0228972, 1.19276),
     (0.0230475, 1.20112),
     (0.0231996, 1.2067),
     (0.0235072, 1.2123),
     (0.0236592, 1.21788),
     (0.0238095, 1.22624),
     (0.0241154, 1.23463),
     (0.0242674, 1.24021),
     (0.0244212, 1.24301),
     (0.0245732, 1.24859),
     (0.0247235, 1.25695),
     (0.0250311, 1.26256),
     (0.0253369, 1.27094),
     (0.0254855, 1.28208),
     (0.0257913, 1.29046),
     (0.0260954, 1.30162),
     (0.0264013, 1.31001),
     (0.0268609, 1.3212),
     (0.0271632, 1.33513),
     (0.0276228, 1.34632),
     (0.0279252, 1.36026),
     (0.0283848, 1.37145),
     (0.0288444, 1.38264),
     (0.0293023, 1.3966),
     (0.0296081, 1.40499),
     (0.029914, 1.41337),
     (0.0302198, 1.42176),
     (0.0303718, 1.42734),
     (0.0308332, 1.43575),
     (0.0311373, 1.44691),
     (0.0316003, 1.45254),
     (0.0317524, 1.45812),
     (0.0322137, 1.46653),
     (0.0325195, 1.47492),
     (0.0329809, 1.48333),
     (0.0334422, 1.49174),
     (0.0339035, 1.50015),
     (0.0342111, 1.50575),
     (0.0346724, 1.51416),
     (0.0351337, 1.52257),
     (0.0355968, 1.52821),
     (0.0359026, 1.53659),
     (0.0363657, 1.54222),
     (0.0368287, 1.54786),
     (0.0372918, 1.55349),
     (0.0375994, 1.5591),
     (0.0380624, 1.56473),
     (0.0385272, 1.56758),
     (0.0388348, 1.57319),
     (0.0392961, 1.5816),
     (0.0400684, 1.59006),
     (0.040687, 1.59572),
     (0.04115, 1.60135),
     (0.0416131, 1.60699),
     (0.0420762, 1.61262),
     (0.0430057, 1.61833),
     (0.0433133, 1.62394),
     (0.0437781, 1.62679),
     (0.0440874, 1.62962),
     (0.0443949, 1.63523),
     (0.0450135, 1.64089),
     (0.0456338, 1.64377),
     (0.0460968, 1.6494),
     (0.0465616, 1.65226),
     (0.0471819, 1.65514),
     (0.0477987, 1.66357),
     (0.0485728, 1.66926),
     (0.0493469, 1.67494),
     (0.0502765, 1.68065),
     (0.050895, 1.68631),
     (0.0515136, 1.69197),
     (0.0525987, 1.69771),
     (0.0533745, 1.70061),
     (0.053993, 1.70627),
     (0.0544578, 1.70913),
     (0.0550781, 1.71201),
     (0.0556967, 1.71767),
     (0.0564725, 1.72058),
     (0.0570928, 1.72346),
     (0.0578685, 1.72636),
     (0.0581761, 1.73197),
     (0.0589519, 1.73488),
     (0.0595722, 1.73776),
     (0.060348, 1.74067),
     (0.0611221, 1.74635),
     (0.0618979, 1.74926),
     (0.0631384, 1.75502),
     (0.0640697, 1.75795),
     (0.0649993, 1.76366),
     (0.0657751, 1.76657),
     (0.0668619, 1.76953),
     (0.0677932, 1.77246),
     (0.0687228, 1.77817),
     (0.0693431, 1.78105),
     (0.0701189, 1.78396),
     (0.0710502, 1.78689),
     (0.0719815, 1.78983),
     (0.0732238, 1.79281),
     (0.0739996, 1.79572),
     (0.0744661, 1.7958),
     (0.0749309, 1.79865),
     (0.0757067, 1.80156),
     (0.0761732, 1.80164),
     (0.0771045, 1.80457),
     (0.0778803, 1.80748),
     (0.0785023, 1.80758),
     (0.0795891, 1.81054),
     (0.0800539, 1.81339),
     (0.0806742, 1.81628),
     (0.0812962, 1.81638),
     (0.0819165, 1.81926),
     (0.082694, 1.81939),
     (0.0834698, 1.8223),
     (0.0840901, 1.82518),
     (0.0848676, 1.82531),
     (0.0857989, 1.82824),
     (0.0865747, 1.83115),
     (0.0875078, 1.8313),
     (0.0882853, 1.83143),
     (0.0887501, 1.83429),
     (0.0893721, 1.83439),
     (0.0896831, 1.83444),
     (0.0901479, 1.8373),
     (0.0903034, 1.83732)]);

    HBCNL = 				list([(2.0375E-06, 0.0526752),
                (2.0061E-06, 0.0526398),
                (2.1343E-06, 0.0557842),
                (2.1676E-06, 0.0558195),
                (2.2357E-06, 0.0588931),
                (2.3061E-06, 0.0589639),
                (2.3785E-06, 0.0620374),
                (2.4918E-06, 0.0621436),
                (2.5700E-06, 0.0652172),
                (2.6510E-06, 0.0652879),
                (2.7345E-06, 0.0653587),
                (2.7769E-06, 0.0683969),
                (2.8644E-06, 0.0684677),
                (2.9089E-06, 0.0715058),
                (3.0005E-06, 0.0715766),
                (3.0474E-06, 0.071612),
                (3.1430E-06, 0.0746856),
                (3.2417E-06, 0.0777591),
                (3.3438E-06, 0.0778299),
                (3.3961E-06, 0.0778653),
                (3.5027E-06, 0.0809389),
                (3.6130E-06, 0.0810096),
                (3.6691E-06, 0.0840478),
                (3.7265E-06, 0.0840832),
                (3.7847E-06, 0.0841186),
                (3.8438E-06, 0.084154),
                (3.9035E-06, 0.0871921),
                (4.0894E-06, 0.0872983),
                (4.1529E-06, 0.0903365),
                (4.2178E-06, 0.0903719),
                (4.3506E-06, 0.0904426),
                (4.4182E-06, 0.0934808),
                (4.5569E-06, 0.0965544),
                (4.7739E-06, 0.0966605),
                (4.8485E-06, 0.0966959),
                (4.9238E-06, 0.0997341),
                (5.2388E-06, 0.0998756),
                (5.3202E-06, 0.102914),
                (5.4877E-06, 0.102985),
                (5.5730E-06, 0.106023),
                (5.7485E-06, 0.106094),
                (5.8383E-06, 0.106129),
                (6.0216E-06, 0.109202),
                (6.2113E-06, 0.109273),
                (6.4069E-06, 0.109344),
                (6.5064E-06, 0.112382),
                (6.7113E-06, 0.112453),
                (6.8156E-06, 0.115491),
                (7.0302E-06, 0.115562),
                (7.1394E-06, 0.1186),
                (7.2510E-06, 0.118635),
                (7.3643E-06, 0.118671),
                (7.5955E-06, 0.121744),
                (7.7142E-06, 0.12178),
                (7.9571E-06, 0.121851),
                (8.2070E-06, 0.124924),
                (8.3352E-06, 0.12496),
                (8.5969E-06, 0.128033),
                (8.8677E-06, 0.128104),
                (9.1470E-06, 0.128175),
                (9.2890E-06, 0.131213),
                (9.5816E-06, 0.131284),
                (9.7304E-06, 0.134322),
                (1.0037E-05, 0.134393),
                (1.0194E-05, 0.134428),
                (1.0352E-05, 0.137466),
                (1.0514E-05, 0.137502),
                (1.0677E-05, 0.14054),
                (1.0844E-05, 0.140575),
                (1.1185E-05, 0.140646),
                (1.1359E-05, 0.143684),
                (1.1717E-05, 0.143755),
                (1.1900E-05, 0.14379),
                (1.2085E-05, 0.146828),
                (1.2274E-05, 0.146864),
                (1.2659E-05, 0.149937),
                (1.2857E-05, 0.149973),
                (1.3058E-05, 0.150008),
                (1.3260E-05, 0.153046),
                (1.3468E-05, 0.153082),
                (1.3891E-05, 0.156155),
                (1.4328E-05, 0.156226),
                (1.4778E-05, 0.1593),
                (1.5242E-05, 0.162373),
                (1.5722E-05, 0.162444),
                (1.5966E-05, 0.165482),
                (1.6469E-05, 0.165553),
                (1.6725E-05, 0.168591),
                (1.7251E-05, 0.168662),
                (1.7793E-05, 0.171735),
                (1.8071E-05, 0.171771),
                (1.8354E-05, 0.171806),
                (1.8930E-05, 0.17488),
                (1.9224E-05, 0.177918),
                (1.9829E-05, 0.177989),
                (2.0454E-05, 0.178059),
                (2.0771E-05, 0.181098),
                (2.1426E-05, 0.181168),
                (2.1758E-05, 0.184207),
                (2.2098E-05, 0.184242),
                (2.2442E-05, 0.18728),
                (2.3148E-05, 0.187351),
                (2.3508E-05, 0.190389),
                (2.3875E-05, 0.190424),
                (2.5012E-05, 0.190531),
                (2.5403E-05, 0.190566),
                (2.5797E-05, 0.193604),
                (2.6198E-05, 0.196642),
                (2.7023E-05, 0.196713),
                (2.7445E-05, 0.196748),
                (2.8307E-05, 0.199822),
                (2.8747E-05, 0.20286),
                (3.0115E-05, 0.202966),
                (3.1061E-05, 0.20604),
                (3.1546E-05, 0.206075),
                (3.2537E-05, 0.209149),
                (3.3042E-05, 0.212187),
                (3.3558E-05, 0.212222),
                (3.4615E-05, 0.212293),
                (3.5153E-05, 0.215331),
                (3.5699E-05, 0.21837),
                (3.6820E-05, 0.221443),
                (3.7395E-05, 0.221479),
                (3.8573E-05, 0.221549),
                (3.9172E-05, 0.224587),
                (3.9784E-05, 0.224623),
                (4.0406E-05, 0.224658),
                (4.1033E-05, 0.227696),
                (4.1670E-05, 0.230735),
                (4.2322E-05, 0.23077),
                (4.2979E-05, 0.233808),
                (4.4333E-05, 0.233879),
                (4.5021E-05, 0.236917),
                (4.6439E-05, 0.236988),
                (4.7897E-05, 0.240061),
                (4.9401E-05, 0.243135),
                (5.0168E-05, 0.246173),
                (5.1743E-05, 0.249247),
                (5.2547E-05, 0.252285),
                (5.5044E-05, 0.255394),
                (5.6772E-05, 0.258467),
                (5.7654E-05, 0.261506),
                (5.9464E-05, 0.264579),
                (6.1337E-05, 0.26465),
                (6.3263E-05, 0.267724),
                (6.5249E-05, 0.270797),
                (6.7298E-05, 0.273871),
                (6.8343E-05, 0.276909),
                (6.9405E-05, 0.279947),
                (7.1590E-05, 0.280018),
                (7.3838E-05, 0.283091),
                (7.4985E-05, 0.28613),
                (7.7332E-05, 0.292206),
                (7.9760E-05, 0.295279),
                (8.3550E-05, 0.298388),
                (8.6174E-05, 0.301462),
                (8.8871E-05, 0.307538),
                (9.1653E-05, 0.313615),
                (9.4531E-05, 0.316688),
                (9.5999E-05, 0.319726),
                (1.0055E-04, 0.325838),
                (1.0371E-04, 0.328912),
                (1.0863E-04, 0.335023),
                (1.1203E-04, 0.3411),
                (1.1554E-04, 0.344173),
                (1.1917E-04, 0.347247),
                (1.2291E-04, 0.35032),
                (1.2482E-04, 0.353359),
                (1.2676E-04, 0.356397),
                (1.2873E-04, 0.359435),
                (1.3277E-04, 0.362509),
                (1.3483E-04, 0.365547),
                (1.3693E-04, 0.368585),
                (1.3905E-04, 0.371623),
                (1.4342E-04, 0.374697),
                (1.4563E-04, 0.380738),
                (1.5255E-04, 0.383847),
                (1.5491E-04, 0.389888),
                (1.5731E-04, 0.392926),
                (1.5976E-04, 0.395964),
                (1.6477E-04, 0.399037),
                (1.6733E-04, 0.402076),
                (1.6993E-04, 0.405114),
                (1.7527E-04, 0.408187),
                (1.7799E-04, 0.411226),
                (1.8075E-04, 0.414264),
                (1.8356E-04, 0.417302),
                (1.8639E-04, 0.423343),
                (1.9225E-04, 0.426416),
                (1.9523E-04, 0.429455),
                (1.9826E-04, 0.432493),
                (2.0134E-04, 0.435531),
                (2.0447E-04, 0.438569),
                (2.0765E-04, 0.441607),
                (2.1087E-04, 0.444646),
                (2.1415E-04, 0.447684),
                (2.1747E-04, 0.450722),
                (2.2085E-04, 0.45376),
                (2.2428E-04, 0.456798),
                (2.2776E-04, 0.459836),
                (2.3130E-04, 0.462875),
                (2.3489E-04, 0.465913),
                (2.3854E-04, 0.468951),
                (2.4225E-04, 0.471989),
                (2.4601E-04, 0.475027),
                (2.4983E-04, 0.478065),
                (2.5371E-04, 0.481104),
                (2.6167E-04, 0.484177),
                (2.6574E-04, 0.487215),
                (2.6987E-04, 0.490254),
                (2.7406E-04, 0.493292),
                (2.7829E-04, 0.499333),
                (2.8261E-04, 0.502371),
                (2.8700E-04, 0.505409),
                (2.9148E-04, 0.505444),
                (2.9601E-04, 0.508483),
                (2.9598E-04, 0.511485),
                (3.0058E-04, 0.514524),
                (3.0525E-04, 0.517562),
                (3.0999E-04, 0.5206),
                (3.1480E-04, 0.523638),
                (3.1972E-04, 0.523674),
                (3.1969E-04, 0.526676),
                (3.2466E-04, 0.529714),
                (3.2970E-04, 0.532753),
                (3.3482E-04, 0.535791),
                (3.3479E-04, 0.538794),
                (3.4002E-04, 0.538829),
                (3.4530E-04, 0.541867),
                (3.4527E-04, 0.54487),
                (3.5063E-04, 0.547908),
                (3.5608E-04, 0.550946),
                (3.6161E-04, 0.553985),
                (3.6726E-04, 0.55402),
                (3.7296E-04, 0.557058),
                (3.7872E-04, 0.563099),
                (3.8460E-04, 0.566137),
                (3.9057E-04, 0.569175),
                (3.9664E-04, 0.572214),
                (4.0280E-04, 0.575252),
                (4.0276E-04, 0.578255),
                (4.0902E-04, 0.581293),
                (4.2182E-04, 0.587369),
                (4.3502E-04, 0.593445),
                (4.4178E-04, 0.596484),
                (4.4864E-04, 0.599522),
                (4.5561E-04, 0.60256),
                (4.6268E-04, 0.605598),
                (4.7717E-04, 0.611674),
                (4.7712E-04, 0.614677),
                (4.9206E-04, 0.620754),
                (4.9970E-04, 0.623792),
                (5.0746E-04, 0.62683),
                (5.1534E-04, 0.629868),
                (5.3147E-04, 0.635945),
                (5.3968E-04, 0.641985),
                (5.4801E-04, 0.648026),
                (5.5652E-04, 0.651065),
                (5.6516E-04, 0.654103),
                (5.7394E-04, 0.657141),
                (5.7389E-04, 0.660144),
                (5.8280E-04, 0.663182),
                (5.9185E-04, 0.66622),
                (6.0104E-04, 0.669258),
                (6.0099E-04, 0.672261),
                (6.1032E-04, 0.675299),
                (6.1980E-04, 0.678337),
                (6.2943E-04, 0.681376),
                (6.3920E-04, 0.684414),
                (6.4913E-04, 0.687452),
                (6.4907E-04, 0.690455),
                (6.5915E-04, 0.693493),
                (6.6939E-04, 0.696531),
                (6.7972E-04, 0.702572),
                (6.9028E-04, 0.70561),
                (7.0100E-04, 0.708648),
                (7.2287E-04, 0.717728),
                (7.3403E-04, 0.723769),
                (7.4543E-04, 0.726807),
                (7.5701E-04, 0.729845),
                (7.6876E-04, 0.732883),
                (7.8063E-04, 0.738924),
                (7.9268E-04, 0.744965),
                (8.0507E-04, 0.745),
                (8.1749E-04, 0.751041),
                (8.3019E-04, 0.75408),
                (8.4308E-04, 0.757118),
                (8.5610E-04, 0.763159),
                (8.6939E-04, 0.766197),
                (8.8290E-04, 0.769235),
                (8.9652E-04, 0.775276),
                (9.1036E-04, 0.781317),
                (9.2450E-04, 0.784355),
                (9.5353E-04, 0.787429),
                (9.8338E-04, 0.793505),
                (9.9856E-04, 0.799546),
                (1.0141E-03, 0.802584),
                (1.0297E-03, 0.808625),
                (1.0457E-03, 0.811663),
                (1.0785E-03, 0.81774),
                (1.0952E-03, 0.820778),
                (1.1122E-03, 0.823816),
                (1.1295E-03, 0.826854),
                (1.1470E-03, 0.829892),
                (1.1830E-03, 0.832966),
                (1.2201E-03, 0.839042),
                (1.2389E-03, 0.845083),
                (1.2777E-03, 0.85116),
                (1.3178E-03, 0.854233),
                (1.3383E-03, 0.857271),
                (1.3591E-03, 0.86031),
                (1.3802E-03, 0.863348),
                (1.4016E-03, 0.866386),
                (1.4234E-03, 0.869424),
                (1.4455E-03, 0.872462),
                (1.4679E-03, 0.8755),
                (1.4907E-03, 0.878539),
                (1.5375E-03, 0.881612),
                (1.5614E-03, 0.88465),
                (1.5858E-03, 0.884686),
                (1.6103E-03, 0.890727),
                (1.6353E-03, 0.893765),
                (1.6866E-03, 0.896838),
                (1.7128E-03, 0.899877),
                (1.7394E-03, 0.902915),
                (1.7664E-03, 0.905953),
                (1.7939E-03, 0.908991),
                (1.8217E-03, 0.912029),
                (1.8789E-03, 0.915103),
                (1.9081E-03, 0.918141),
                (1.9680E-03, 0.921215),
                (2.0296E-03, 0.927291),
                (2.0612E-03, 0.930329),
                (2.1591E-03, 0.933438),
                (2.2269E-03, 0.936512),
                (2.2968E-03, 0.939585),
                (2.3325E-03, 0.942623),
                (2.4059E-03, 0.942694),
                (2.4815E-03, 0.945768),
                (2.5200E-03, 0.948806),
                (2.5592E-03, 0.951844),
                (2.6808E-03, 0.954953),
                (2.7226E-03, 0.954988),
                (2.8517E-03, 0.9611),
                (2.9416E-03, 0.961171),
                (3.0813E-03, 0.96428),
                (3.2277E-03, 0.967389),
                (3.2779E-03, 0.970427),
                (3.3811E-03, 0.970498),
                (3.4873E-03, 0.973571),
                (3.6530E-03, 0.97668),
                (3.7680E-03, 0.976751),
                (3.8867E-03, 0.976822),
                (4.0087E-03, 0.979895),
                (4.0714E-03, 0.979931),
                (4.1992E-03, 0.983004),
                (4.3314E-03, 0.983075),
                (4.3991E-03, 0.983111),
                (4.5377E-03, 0.983181),
                (4.6086E-03, 0.983217),
                (4.6801E-03, 0.986255),
                (4.7533E-03, 0.98629),
                (4.9030E-03, 0.986361),
                (5.0574E-03, 0.986432),
                (5.2167E-03, 0.986503),
                (5.2982E-03, 0.986538)]);


    A = math.pi / 4.0 * d1 * d1
    API = oilprops.oilAPI(gammaOil);
    Tave = (T1 + T2) / 2.0;
    Rsb = RS.RsAtPb(Pb, Pb, Tave, gammaGas, API, Rs_method, c_val_Rs)
    Bob = OFVF_functions.OFVF_func(Pb, Pb, Rsb, Tave, gammaGas, gammaOil, OFVF_method, c_OFVF)
    Rs = RS.RsAtPb(P1, Pb, Tave, gammaGas, API,Rs_method, c_val_Rs);
    Bo = OFVF_functions.OFVF_func(P1, Pb, Rs, Tave, gammaGas, gammaOil, OFVF_method, c_OFVF);
    rhoO = oilprops.oilDensityBubble(gammaOil, Rs, gammaGas, Bo);
    rhoL = qw * rhoW + qo * rhoO / (qw + qo);
    dP = rhoL * gacc / gc * np.sin(theta) * dL / 144.0;
    P2_new = P1 - dP;

    err = 1.0
    tol = 1e-8;

    while err > tol:
        P2_old = P2_new;
        Pave = (P2_old + P1) * 0.5;
        Rs = RS.RsAtPb(Pave, Pb, Tave, gammaGas, API, Rs_method, c_val_Rs);
        Bo = OFVF_functions.OFVF_func(Pave, Pb, Rs, Tave, gammaGas, gammaOil, OFVF_method, c_OFVF);
        rhoO = oilprops.oilDensityBubble(gammaOil, Rs, gammaGas, Bob);
        qo_ac = Bo * qo;
        qw_ac = Bw * qw;
        qL_ac = qo_ac + qw_ac;
        uo = Bo * qo * 5.615 / (A * 86400.0);
        uw = Bw * qw * 5.615 / (A * 86400.0);
        uL = uo + uw;
        rhoL = uw / uL * rhoW + uo / uL * rhoO;
        muO = oilViscosity_functions.oilViscosity_func(Pb,
                                                       Pave, Tave, API, Rs, muO_method1, muO_method2, muO_method3,
                                                       c_val_muO);
        muL = (uo/uL) * muO + (uw/uL) * muW;

        Rs2 = RS.RsAtPb(P2_old, Pb, T2, gammaGas, API, Rs_method, c_val_Rs);
        Bo2 = OFVF_functions.OFVF_func(P2_old, Pb, Rs2, T2, gammaGas, gammaOil,OFVF_method, c_OFVF);
        qo_ac2 = Bo2 * qo;
        uo2 = Bo2 * qo * 5.615 / (A * 86400.0);
        uL2 = uo2 + uw;

        Rs1 = RS.RsAtPb(P1, Pb, T1, gammaGas, API, Rs_method, c_val_Rs);
        Bo1 = OFVF_functions.OFVF_func(P1, Pb, Rs1, T1, gammaGas, gammaOil,OFVF_method, c_OFVF);
        qo_ac1 = Bo1 * qo;
        uo1 = Bo1 * qo * 5.615 / (A * 86400.0);
        uL1 = uo1 + uw;


        if (Pave < Pb) : #or (qgSc > Rsb * qo)
            Z = GasProperties_functions.GasCompressibilityFactor(Pave, Tave + 460, Ppc, Tpc, c_val_Z);
            Bg = GasProperties_functions.GFVF_func(Pave, Tave, Z)
            rhog = GasProperties_functions.GasDensity_func(Pave, Tave, gammaGas * 28.97, Z)
            qg = (Rsb - Rs) * qo;
            #qg = qgSc - Rs * qo;
            qg_ac = Bg * qg;
            ug = qg_ac / (A * 86400);
            um = ug + uL;

            Z2 = GasProperties_functions.GasCompressibilityFactor(P2_old, T2+ 460, Ppc, Tpc, c_val_Z);
            Bg2 = GasProperties_functions.GFVF_func(P2_old, T2, Z)
            rhog2 = GasProperties_functions.GasDensity_func(P2_old, T2, gammaGas * 28.97, Z2)
            qg2 = (Rsb - Rs2) * qo;
            qg_ac2 = Bg2 * qg2;
            ug2 = qg_ac2 / (A * 86400);
            um2 = ug2 + uL2;

            Z1 = GasProperties_functions.GasCompressibilityFactor(P1, T1+ 460, Ppc, Tpc, c_val_Z);
            Bg1 = GasProperties_functions.GFVF_func(P1, T1, Z)
            rhog1 = GasProperties_functions.GasDensity_func(P1, T1, gammaGas * 28.97, Z2)
            qg1 = (Rsb - Rs1) * qo;
            qg_ac1 = Bg1 * qg1;
            ug1 = qg_ac1 / (A * 86400);
            um1 = ug1 + uL1;



            LB = 1.071 - 0.2218 * um * um / d1;
            if LB < 0.13:
                LB = 0.13
            lambdag = ug / um;

            if lambdag < LB:
                us = 0.8
                yl = 1.0 - 0.5 * (1.0 +
                                  um / us - math.sqrt((1.0 + um / us) * (1.0 + um / us)
                                                      -4.0 * ug / us));
                uL_ac = uL / yl;
                m_total = A * (rhoL * uL + rhog * ug) * 86400;
                Re = flowCommon.reynoldsNum(rhoL, uL_ac, muL, d1);
                ff = flowCommon.colebrookWhite(e, Re);
                rho_total = yl * rhoL + (1.0 - yl) * rhog;
            else:
                ift = oilprops.surfaceTensionOilGas(Pave, Tave, API);
                iftL = uo/uL * ift + uw/uL * iftW;
                N_vl = 1.938 * uL * math.sqrt(math.sqrt(rhoL/iftL))
                N_vg = 1.938 * ug * math.sqrt(math.sqrt(rhoL / iftL))
                N_D = 120.872 * d1 * d1 * math.sqrt(rhoL/iftL)
                N_L = 0.15726 * muL * muL * muL * muL * math.sqrt(1.0/(rhoL * iftL * iftL * iftL))
                Pa = 14.7;
                CNL = flowCommon.XY_TABLE_interpolation(HBCNL, N_L);
                temp = N_vl * pow(Pave, 0.1) * CNL / (pow(N_vg, 0.575) * pow(Pa, 0.1) * N_D);
                ylSai = flowCommon.XY_TABLE_interpolation(HBySai, temp);
                temp = N_vg * pow(N_L, 0.38) / pow(N_D, 2.14)
                sai = flowCommon.XY_TABLE_interpolation(HBsai, temp);
                yl = ylSai * sai;
                lambdal = 1.0 - lambdag
                if (yl < lambdal):
                    yl = lambdal
                mug = GasProperties_functions.GasViscosity_func(Pave, Tave, gammaGas, "Dempsey", c_val_mug)
                m_total = (rhoL * uL + rhog * ug) * A * 86400.0;
                Re = 2.2 * 1e-2 * m_total / (d1 * pow(muL, yl) * pow(mug, 1.0-yl));
                rho_total = yl * rhoL + (1.0 - yl) * rhog;
                ff = flowCommon.colebrookWhite(e, Re);

            dpdz_total = (rho_total + ff * m_total * m_total / (7.413 * 1e+10 * pow(d1, 5.0) * rho_total)) / 144.0;

        else:


            yo = uo / uL;



            dpdz_PE = flowCommon.cal_dpdz(rhoL, theta, gacc, gc);
            Re = flowCommon.reynoldsNum(rhoL, uL, d1, muL);
            ff = flowCommon.colebrookWhite(e, Re);
            dpdz_f = flowCommon.cal_dpdzFriction(ff, rhoL, uL, gc, d1);
            dpdz_KE = flowCommon.cal_dpdzKE(rhoL, qL_ac, gc, d1, d2);
            dpdz_total = dpdz_PE + dpdz_f + dpdz_KE;

        dp_total = dpdz_total * dL;
        P2_new = P1 - dp_total;
        err = abs((P2_new - P2_old) / P2_old)
    return P2_new


def BeggsAndBrill(qo, qw, Bw, rhoW, muW, iftW, T2, P1, T1, d2, d1, Pb,
                          c_val_Rs, Rs_method, gammaGas, gammaOil, OFVF_method,c_OFVF,
                          gacc, gc, dL, theta, e, Ppc, Tpc, c_val_Z,
                          muO_method1, muO_method2, muO_method3, c_val_muO, c_val_mug):





    A = math.pi / 4.0 * d1 * d1
    API = oilprops.oilAPI(gammaOil);
    Tave = (T1 + T2) / 2.0;
    Rsb = RS.RsAtPb(Pb, Pb, Tave, gammaGas, API, Rs_method, c_val_Rs)
    Bob = OFVF_functions.OFVF_func(Pb, Pb, Rsb, Tave, gammaGas, gammaOil, OFVF_method, c_OFVF)
    Rs = RS.RsAtPb(P1, Pb, Tave, gammaGas, API,Rs_method, c_val_Rs);
    Bo = OFVF_functions.OFVF_func(P1, Pb, Rs, Tave, gammaGas, gammaOil, OFVF_method, c_OFVF);
    rhoO = oilprops.oilDensityBubble(gammaOil, Rs, gammaGas, Bo);
    rhoL = qw * rhoW + qo * rhoO / (qw + qo);
    dP = rhoL * gacc / gc * np.sin(theta) * dL / 144.0;
    P2_new = P1 - dP;

    err = 1.0
    tol = 1e-8;

    while err > tol:
        P2_old = P2_new;
        Pave = (P2_old + P1) * 0.5;
        Rs = RS.RsAtPb(Pave, Pb, Tave, gammaGas, API, Rs_method, c_val_Rs);
        Bo = OFVF_functions.OFVF_func(Pave, Pb, Rs, Tave, gammaGas, gammaOil, OFVF_method, c_OFVF);
        rhoO = oilprops.oilDensityBubble(gammaOil, Rs, gammaGas, Bo)

        qo_ac = Bo * qo;
        qw_ac = Bw * qw;
        qL_ac = qo_ac + qw_ac;
        uo = Bo * qo * 5.615 / (A * 86400.0);
        uw = Bw * qw * 5.615 / (A * 86400.0);
        uL = uo + uw;
        rhoL = uw/uL * rhoW + uo/uL * rhoO;
        muO = oilViscosity_functions.oilViscosity_func(Pb,
                                                       Pave, Tave, API, Rs, muO_method1, muO_method2, muO_method3,
                                                       c_val_muO);
        muL = (uo/uL) * muO + (uw/uL) * muW;

        Rs2 = RS.RsAtPb(P2_old, Pb, T2, gammaGas, API, Rs_method, c_val_Rs);
        Bo2 = OFVF_functions.OFVF_func(P2_old, Pb, Rs2, T2, gammaGas, gammaOil,OFVF_method, c_OFVF);
        qo_ac2 = Bo2 * qo;
        uo2 = Bo2 * qo * 5.615 / (A * 86400.0);
        uL2 = uo2 + uw;

        Rs1 = RS.RsAtPb(P1, Pb, T1, gammaGas, API, Rs_method, c_val_Rs);
        Bo1 = OFVF_functions.OFVF_func(P1, Pb, Rs1, T1, gammaGas, gammaOil,OFVF_method, c_OFVF);
        qo_ac1 = Bo1 * qo;
        uo1 = Bo1 * qo * 5.615 / (A * 86400.0);
        uL1 = uo1 + uw;


        if (Pave < Pb) : #or (qgSc > Rsb * qo)
            Z = GasProperties_functions.GasCompressibilityFactor(Pave, Tave + 460, Ppc, Tpc, c_val_Z);
            Bg = GasProperties_functions.GFVF_func(Pave, Tave, Z)
            rhog = GasProperties_functions.GasDensity_func(Pave, Tave, gammaGas * 28.97, Z)
            qg = (Rsb - Rs) * qo;
            #qg = qgSc - Rs * qo;
            qg_ac = Bg * qg;
            ug = qg_ac / (A * 86400);
            um = ug + uL;

            Z2 = GasProperties_functions.GasCompressibilityFactor(P2_old, T2+ 460, Ppc, Tpc, c_val_Z);
            Bg2 = GasProperties_functions.GFVF_func(P2_old, T2, Z)
            rhog2 = GasProperties_functions.GasDensity_func(P2_old, T2, gammaGas * 28.97, Z2)
            qg2 = (Rsb - Rs2) * qo;
            qg_ac2 = Bg2 * qg2;
            ug2 = qg_ac2 / (A * 86400);
            um2 = ug2 + uL2;

            Z1 = GasProperties_functions.GasCompressibilityFactor(P1, T1+ 460, Ppc, Tpc, c_val_Z);
            Bg1 = GasProperties_functions.GFVF_func(P1, T1, Z)
            rhog1 = GasProperties_functions.GasDensity_func(P1, T1, gammaGas * 28.97, Z2)
            qg1 = (Rsb - Rs1) * qo;
            qg_ac1 = Bg1 * qg1;
            ug1 = qg_ac1 / (A * 86400);
            um1 = ug1 + uL1;



            Nfr = um * um / (gacc * d1);
            sigma = oilprops.surfaceTensionOilGas(Pave, Tave, API);
            Nvl = 1.938 * uL * pow(rhoO / sigma, 0.25);
            lambdaL = uL / um;
            L1 = 316.0 * pow(lambdaL, 0.302)
            L2 = 0.0009252 * pow(lambdaL, -2.4684)
            L3 = 0.10 * pow(lambdaL, -1.4516)
            L4 = 0.5 * pow(lambdaL, -6.738)

            if (((lambdaL < 0.01) and (Nfr >= 0.01)) or ((lambdaL >= 0.01) and (Nfr < L2))):
                a = 0.98;
                b = 0.4846;
                c = 0.0868;
                d = 0.011;
                e = -3.768;
                f = 3.539;
                g = -1.614;
                temp = d * pow(lambdaL, e) * pow(Nvl, f) * pow(Nfr, g);
                C = (1 - lambdaL) * math.log(temp);
                sinTemp = math.sin(theta);
                sai = 1 + C * (sinTemp - 0.333 * sinTemp * sinTemp * sinTemp);
                ylo = a * pow(lambdaL, b) / pow(Nfr, c);
                if (ylo < lambdaL):
                    ylo = lambdaL;

                yL = ylo * sai;
            elif (lambdaL >= 0.01) and (Nfr > L2) and (Nfr < L3):
                A = (L3 - Nfr) / (L3 - L2);
                B = 1 - A;
                a = 0.98;
                b = 0.4846;
                c = 0.0868;
                d = 0.011;
                e = -3.768;
                f = 3.539;
                g = -1.614;
                temp = d * pow(lambdaL, e) * pow(Nvl, f) * pow(Nfr, g);
                C = (1 - lambdaL) * math.log(temp);
                sinTemp = math.sin(theta);
                sai = 1 + C * (sinTemp - 0.333 * sinTemp * sinTemp * sinTemp);
                ylo = a * pow(lambdaL, b) / pow(Nfr, c);
                if (ylo < lambdaL):
                    ylo = lambdaL;

                ylseg = ylo * sai;

                a = 0.845;
                b = 0.5351;
                c = 0.0173;
                d = 2.96;
                e = 0.305;
                f = -0.4473;
                g = 0.0978;
                temp = d * pow(lambdaL, e) * pow(Nvl, f) * pow(Nfr, g);
                C = (1 - lambdaL) * math.log(temp);
                sinTemp = math.sin(theta);
                sai = 1 + C * (sinTemp - 0.333 * sinTemp * sinTemp * sinTemp);
                ylo = a * pow(lambdaL, b) / pow(Nfr, c);
                if (ylo < lambdaL):
                    ylo = lambdaL;

                ylint = ylo * sai;
                yL = A * ylseg + B * ylint;


            elif (((lambdaL >= 0.01) and (Nfr < 0.40)) or ((lambdaL >= 0.4) and (Nfr > L3) and (Nfr < L4))):
                a = 0.845;
                b = 0.5351;
                c = 0.0173;
                d = 2.96;
                e = 0.305;
                f = -0.4473;
                g = 0.0978;
                temp = d * pow(lambdaL, e) * pow(Nvl, f) * pow(Nfr, g);
                C = (1 - lambdaL) * math.log(temp);
                sinTemp = math.sin(theta);
                sai = 1 + C * (sinTemp - 0.333 * sinTemp * sinTemp * sinTemp);
                ylo = a * pow(lambdaL, b) / pow(Nfr, c);
                if (ylo < lambdaL):
                    ylo = lambdaL;

                yL = ylo * sai;


            elif (((lambdaL < 0.40) and (Nfr >= L1)) or ((lambdaL >= 0.4) and (Nfr > L4))):
                a = 1.065;
                b = 0.5824;
                c = 0.0609;
                d = 4.70;
                e = -0.3692;
                f = 0.1244;
                g = -0.5056;
                temp = d * pow(lambdaL, e) * pow(Nvl, f) * pow(Nfr, g);
                C = (1 - lambdaL) * math.log(temp);
                sinTemp = math.sin(theta);
                sai = 1 + C * (sinTemp - 0.333 * sinTemp * sinTemp * sinTemp);
                ylo = a * pow(lambdaL, b) / pow(Nfr, c);
                if (ylo < lambdaL):
                    ylo = lambdaL;

                yL = ylo * sai;
            rho_total = rhoL * yL + rhog * (1.0 - yL);
            m_total = (rhoL * uL + rhog * ug) * A * 86400.0;
            mug = GasProperties_functions.GasViscosity_func(Pave, Tave, gammaGas, "Dempsey", c_val_mug)
            mu_total = muL * yL + mug * (1.0 - yL);
            NRe = flowCommon.reynoldsNum(rho_total, um, d1, mu_total)
            fn = flowCommon.colebrookWhite(0, NRe)
            x = lambdaL / (yL * yL);
            S = -1e+10
            if (x > 1) and (x < 1.2):
                S = np.log(2.2 * x - 1.2)
            else:
                temp2 = np.log(x)
                temp3 = -0.0523 + 3.182 * temp2 - 0.8725 * temp2 * temp2 + 0.01853 * temp2 * temp2 * temp2 * temp2
                S = temp2 / temp3

            ftp = fn * np.exp(S)
            dpdz_f = 2.0 * ftp * rho_total * um * um / (gc * d1) / 144.0
            dpdz_PE = gacc / gc * rho_total * math.sin(theta)/ 144.0

            Ek = um * ug * rho_total / (gc * Pave)
            dpdz_total = (dpdz_PE + dpdz_f) / (1.0 - Ek)

        else:


            yo = uo / uL;




            dpdz_PE = flowCommon.cal_dpdz(rhoL, theta, gacc, gc);
            Re = flowCommon.reynoldsNum(rhoL, uL, d1, muL);
            ff = flowCommon.colebrookWhite(e, Re);
            dpdz_f = flowCommon.cal_dpdzFriction(ff, rhoL, uL, gc, d1);
            dpdz_KE = flowCommon.cal_dpdzKE(rhoL, qL_ac, gc, d1, d2);
            dpdz_total = dpdz_PE + dpdz_f + dpdz_KE;

        dp_total = dpdz_total * dL;
        P2_new = P1 - dp_total;
        err = abs((P2_new - P2_old) / P2_old)
    return P2_new







